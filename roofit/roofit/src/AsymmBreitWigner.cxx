/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 
//  For info: pierluigi.catastini@cern.ch. 
//  See:
//
//  https://indico.cern.ch/getFile.py/access?contribId=2&resId=0&materialId=slides&confId=222283
//
//  for a description.


#include "Riostream.h" 

#include "AsymmBreitWigner.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(AsymmBreitWigner) 

 AsymmBreitWigner::AsymmBreitWigner(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _mu,
                        RooAbsReal& _gamma,
                        RooAbsReal& _n,
                        RooAbsReal& _alpha) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   mu("mu","mu",this,_mu),
   gamma("gamma","gamma",this,_gamma),
   n("n","n",this,_n),
   alpha("alpha","alpha",this,_alpha)
 { 
 } 


 AsymmBreitWigner::AsymmBreitWigner(const AsymmBreitWigner& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   mu("mu",this,other.mu),
   gamma("gamma",this,other.gamma),
   n("n",this,other.n),
   alpha("alpha",this,other.alpha)
 { 
 } 



Double_t AsymmBreitWigner::evaluate() const 
{ 
  Double_t val = -999.;
  Double_t num = (x - mu)/gamma;
  if( num > -alpha){
    val = TMath::BreitWigner(x, mu, gamma);
  }
  else{
    Double_t A = TMath::Power(2, 1-3*n)*TMath::Power((4*alpha*n + n/alpha),n);
    A /=(TMath::Pi()*gamma*(1+4*alpha*alpha));
    Double_t B = 0.5*n*(alpha*alpha + 0.25)/alpha -alpha;
    val = A*TMath::Power(B - num, -n);
  }
  
  if(val < 0.){
    std::cout << " ######### ERROR : Asymmetric Breit Wigner Function is Negative ! Returning 0 " << num << std::endl;
    return 0.;
  }
  return val; 
} 



