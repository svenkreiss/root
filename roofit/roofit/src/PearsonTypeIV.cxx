/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 
//  For info: pierluigi.catastini@cern.ch. 
//  See:
//
//  www-cdf.fnal.gov/physics/statistics/notes/cdf6820_pearson4.pdf
//
//  for reference.


#include "Riostream.h" 

#include "PearsonTypeIV.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(PearsonTypeIV) 

 PearsonTypeIV::PearsonTypeIV(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _m,
                        RooAbsReal& _nu,
                        RooAbsReal& _a,
                        RooAbsReal& _lambda) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   m("m","m",this,_m),
   nu("nu","nu",this,_nu),
   a("a","a",this,_a),
   lambda("lambda","lambda",this,_lambda)
 { 
 } 


 PearsonTypeIV::PearsonTypeIV(const PearsonTypeIV& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   m("m",this,other.m),
   nu("nu",this,other.nu),
   a("a",this,other.a),
   lambda("lambda",this,other.lambda)
 { 
 } 



 Double_t PearsonTypeIV::evaluate() const 
 { 
   if(m <= 0.5){
     std::cout << " ######### ERROR : m <= 0.5 NOT VALID in this implementation of Pearson IV Function !  Returning 0 " << std::endl;
     return 0.;
   }
   
   Double_t tmp1 = 1 + (x - lambda)/a*(x - lambda)/a;
   Double_t tmp2 = -nu*TMath::ATan((x - lambda)/a);
   Double_t val = (TMath::Power( tmp1, -m ) * TMath::Exp(tmp2));
   
   if(val < 0.){
     std::cout << " ######### ERROR : Pearson IV Function is NEGATIVE !  Returning 0 " << std::endl;
     return 0.;
   } 
   return val;
 } 



